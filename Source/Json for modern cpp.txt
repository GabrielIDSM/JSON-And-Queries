\subsection{JSON for Modern C++}
				\subsubsection{Introdução}
					A biblioteca \textbf{JSON for Modern C++} é um biblioteca de C++ desenvolvida para manipular arquivos JSON de maneira prática, eficiente e simples. É um projeto de código aberto e está disponível no GitHub (\textit{https://github.com/nlohmann/json}). Está na versão 3.9.1 e conta com a participação de 178 colaboradores.
				\subsubsection{Sintaxe}
					A biblioteca foi construída para lidar com JSON como objetos de C++, isso permite que as operações em um JSON sejam como operar um objeto qualquer, como um array.

					A biblioteca permite inúmeras possibilidades de manipulação de JSON, mas, considerando o contexto mais restrito de um arquivo JSON, uma query e um JSON como resposta, algumas operações se destacam:
	
					\begin{figure}[H]
						\centering
						\includegraphics[width=6.5cm]{jsonFC.png}
						\label{figure:Image}
						\caption{É possível criar um objeto JSON utilizando o tipo de dado \textbf{json}}
					\end{figure}

					\begin{figure}[H]
						\centering
						\includegraphics[width=6.5cm]{jsonArray.png}
						\label{figure:Image}
						\caption{O tipo de dado json pode trabalhar com Arrays}
					\end{figure}

\newpage

					\begin{figure}[H]
						\centering
						\includegraphics[width=6.5cm]{jsonObj.png}
						\label{figure:Image}
						\caption{O tipo de dado json pode trabalhar com Objetos}
					\end{figure}
					
					\begin{figure}[H]
						\centering
						\includegraphics[width=6.5cm]{jsonDT.png}
						\label{figure:Image}
						\caption{É possível verificar tipos de dados no JSON}
					\end{figure}

					\begin{figure}[H]
						\centering
						\includegraphics[width=7.7cm]{jsonAlg.png}
						\label{figure:Image}
						\caption{Algoritmos podem ser construídos para manipular objetos JSON}
					\end{figure}

\newpage

				\subsubsection{Exemplo}
					Como exemplo, vamos usar o arquivo Request.json
\begin{lstlisting}[style=CStyle]
std::ifstream i("Request.json");
json j;
i >> j;
\end{lstlisting}

					Uma vez que o arquivo JSON está contido no objeto “j", é possível operar esse objeto para extrair informações. Por exemplo, para obter a informação “params" presente em “reports" podemos fazer:
\begin{lstlisting}[style=CStyle]
json response;
for(int i = 0; i < N; i++) {
	response += {"Params", j[i]["Params"].get<int>()};
}
\end{lstlisting}

					Onde N é o número de elementos no array “reports". Após isso, podemos retornar o novo objeto “response" na forma de um arquivo JSON:
\begin{lstlisting}[style=CStyle]
std::ofstream o("Response.json");
o << std::setw(4) << response << std::endl;
\end{lstlisting}

					Nesse caso, podemos usar o operador \textit{setw(n)} com “n" igual a 4 para deixar o JSON esteticamente mais bonito.